import threading
from beeprint import pp as print
import time
import serial
import numpy as np


import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Quaternion
from tf_transformations import quaternion_from_euler
from rclpy.qos import qos_profile_system_default

from pyproj import CRS, Transformer

from .utils import *


class UM982Solver:
    def __init__(self) -> None:
        # From PVTSLN message
        self.bestpos_hgt    = 0
        self.bestpos_lat    = 0
        self.bestpos_lon    = 0
        self.bestpos_hgtstd = 0
        self.bestpos_latstd = 0
        self.bestpos_lonstd = 0
        # From KSXT message
        self.vel_east       = 0
        self.vel_north      = 0
        self.vel_up         = 0
        # From GPHPR message
        self.heading        = 0
        self.pitch          = 0
        self.roll           = 0
        # From BESTNAV message
        self.vel_horstd     = 0
        self.vel_verstd     = 0
        # 转换为UTM
        self.utm_x          = 0
        self.utm_y          = 0
        # std
        self.vel_east_std   = 0
        self.vel_north_std  = 0
        self.vel_hor_cov    = 0
        self.vel_up_std     = 0


    def PVTSLN_solver(self, msg:str):
        parts = msg_seperate(msg)
        self.bestpos_hgt = float(parts[3+7])
        self.bestpos_lat = float(parts[4+7])
        self.bestpos_lon = float(parts[5+7])
        self.bestpos_hgtstd = float(parts[6+7])
        self.bestpos_latstd = float(parts[7+7])
        self.bestpos_lonstd = float(parts[8+7])

    def KSXT_solver(self, msg:str):
        parts = msg_seperate(msg)
        self.vel_east  = float(parts[18-1])
        self.vel_north = float(parts[19-1])
        self.vel_up    = float(parts[20-1])

    def GNHPR_solver(self, msg:str):
        parts = msg_seperate(msg)
        self.heading = float(parts[3-1])
        self.pitch   = float(parts[4-1])
        self.roll    = float(parts[5-1])

    def BESTNAV_solver(self, msg:str):
        parts = msg_seperate(msg)
        self.vel_horstd = float(parts[-1])
        self.vel_verstd = float(parts[-2])

    def utm_trans(self):
        wgs84_crs              = CRS("epsg:4326")
        zone_number, isnorth   = determine_utm_zone_and_hemisphere(self.bestpos_lat, self.bestpos_lon)
        utm_crs_str            = f"epsg:326{zone_number}" if isnorth else f"epsg:327{zone_number}"
        utm_crs                = CRS(utm_crs_str)
        transformer            = Transformer.from_crs(wgs84_crs, utm_crs, always_xy=True)
        self.utm_x, self.utm_y = transformer.transform(self.bestpos_lon, self.bestpos_lat)

    def std_trans(self):
        heading_rad = np.deg2rad(self.heading)
        cos_h = np.cos(heading_rad)
        sin_h = np.sin(heading_rad)
        vel_cov_xy         = self.vel_horstd ** 2
        self.vel_east_std  = np.sqrt(vel_cov_xy * cos_h ** 2)       # 东方向速度的方差
        self.vel_hor_cov   = np.sqrt(vel_cov_xy * cos_h * sin_h)    # 速度的协方差
        self.vel_north_std = np.sqrt(vel_cov_xy * sin_h ** 2)       # 北方向速度的方差
        self.vel_up_std    = self.vel_verstd                        # 天方向速度的方差

    def parse(self, msg: str):
        all_msg = msg
        split_msg = all_msg.strip().split("\r\n")
        for msg in split_msg:
            if msg.startswith("#PVTSLNA") and check_crc(msg):
                self.PVTSLN_solver(msg)
            elif msg.startswith("$GNHPR") and check_checksum(msg):
                self.GNHPR_solver(msg)
            elif msg.startswith("$KSXT") and check_checksum(msg):
                self.KSXT_solver(msg)
            elif msg.startswith("#BESTNAVA") and check_crc(msg):
                self.BESTNAV_solver(msg)


class UM982SerialDriverNode(threading.Thread, Node):
    def __init__(self, ser:serial.Serial) -> None:
        threading.Thread.__init__(self)
        Node.__init__(self, 'um982_serial_driver_node')
        self.ser       = ser
        self.solver    = UM982Solver()
        self.isrunning = True
        self.odom_pub  = self.create_publisher(Odometry, 'odom', qos_profile_system_default)


    def get_nmea_msg(self) -> bool:
        all_msg = str(self.ser.read_all(),'utf-8')
        if ( len(all_msg) == 0 ):
            return False
        else:
            self.solver.parse(all_msg)
            self.solver.utm_trans()
            self.solver.std_trans()
            return True


    def nmea_msg_to_odom(self) -> None:
        msg = Odometry()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.header.frame_id = 'utm'
        msg.child_frame_id  = 'base_link'

        # 设置位置
        msg.pose.pose.position.x = self.solver.utm_x
        msg.pose.pose.position.y = self.solver.utm_y
        msg.pose.pose.position.z = self.solver.bestpos_hgt

        # 使用roll, pitch, heading设置方向
        q = quaternion_from_euler(self.solver.roll, self.solver.pitch, self.solver.heading)
        msg.pose.pose.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

        # 填充位置的方差
        msg.pose.covariance[0]  = self.solver.bestpos_latstd ** 2    # position.x的方差
        msg.pose.covariance[7]  = self.solver.bestpos_lonstd ** 2    # position.y的方差
        msg.pose.covariance[14] = self.solver.bestpos_hgtstd ** 2   # position.z的方差

        small_var = 1e-6  # 一个非常小的方差值
        msg.pose.covariance[21] = small_var  # roll的方差
        msg.pose.covariance[28] = small_var  # pitch的方差
        msg.pose.covariance[35] = small_var  # yaw的方差

        # 填充速度
        msg.twist.twist.linear.x = self.solver.vel_north
        msg.twist.twist.linear.y = self.solver.vel_east
        msg.twist.twist.linear.z = self.solver.vel_up

        # 填充速度标准差
        msg.twist.covariance[0]  = self.solver.vel_east_std  ** 2   # linear.x 的方差
        msg.twist.covariance[1]  = self.solver.vel_hor_cov ** 2     # linear.x和linear.y的协方差
        msg.twist.covariance[6]  = self.solver.vel_hor_cov ** 2     # linear.y和linear.x的协方差
        msg.twist.covariance[7]  = self.solver.vel_north_std ** 2   # linear.y 的方差
        msg.twist.covariance[14] = self.solver.vel_up_std ** 2      # linear.z 的方差

        self.odom_pub.publish(msg)


    def run(self):
        while self.isrunning:
            if( self.get_nmea_msg() ):
                self.nmea_msg_to_odom()
            time.sleep(0.02)

    def terminate(self):
        self.isrunning = False
        self.ser.close()



def main():
    rclpy.init()
    parm_getter = Node("parm_getter_for_um982_serial_driver")
    serial_port = parm_getter.declare_parameter('serial_port', '/dev/ttyACM0').get_parameter_value().string_value
    baud_rate   = parm_getter.declare_parameter('baud_rate', 921600).get_parameter_value().integer_value
    parm_getter.destroy_node()
    um982_serial_driver = UM982SerialDriverNode(serial.Serial(serial_port, baud_rate))
    try:
        um982_serial_driver.start()
        rclpy.spin(um982_serial_driver)
    except KeyboardInterrupt:
        pass
    finally:
        um982_serial_driver.terminate()
        um982_serial_driver.join()
        if rclpy.ok():
            rclpy.shutdown()


if __name__ == '__main__':
    main()
